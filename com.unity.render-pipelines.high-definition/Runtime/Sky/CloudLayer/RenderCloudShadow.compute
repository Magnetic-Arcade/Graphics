#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma multi_compile_local _ USE_CLOUD_MAP
#pragma multi_compile_local _ USE_CLOUD_MOTION

#pragma kernel RenderCloudShadow KERNEL_NAME=RenderCloudShadow

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyUtils.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/CloudLayer/CloudLayer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

RW_TEXTURE2D_X(float, _CloudShadow);
float _CloudShadowOpacity;
float _CloudShadowTiling;

float sampleCloudShadow(float2 uv, float3 p, float y, float3 R)
{
    p.xz = uv * _CloudShadowTiling;
    float3 dir = normalize(p + y * R);

    uv *= 2.0;
    float weight = 1.0 - saturate(sqrt(dot(uv, uv)));

    return GetCloudOpacity(dir) * weight;
}

float ComputeCloudShadow(float3 pos, float3 R)
{
    float2 uv = pos.xz / _CloudShadowTiling;
    float2 uv1 = frac(uv + 0.5) - 0.5;
    float2 uv2 = frac(uv) - 0.5;

    float y = (_CloudShadowTiling - pos.y) / R.y;

    float color1 = sampleCloudShadow(uv1, pos, y, R);
    float color2 = sampleCloudShadow(uv2, pos, y, R);

    float cloudShadow = (color1 + color2) * 1.5 * _CloudShadowOpacity;
    return saturate(cloudShadow);
}

[numthreads(8,8,1)]
void KERNEL_NAME(uint2 pixelCoord : SV_DispatchThreadID)
{
    float2 coords = pixelCoord / float2(2048.0, 1024.0);

    float depth = LoadCameraDepth(pixelCoord);
    PositionInputs posInput = GetPositionInput(pixelCoord.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, 0);

    DirectionalLightData light = _DirectionalLightDatas[_DirectionalShadowIndex];

    float shadow = ComputeCloudShadow(posInput.positionWS + _WorldSpaceCameraPos, -light.forward);

    _CloudShadow[COORD_TEXTURE2D_X(pixelCoord)] = shadow;
}
